#!/usr/bin/env python3

# quick-lint-js finds bugs in JavaScript programs.
# Copyright (C) 2020  Matthew Glazar
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse
import json
import os
import pathlib
import pipes
import subprocess
import sys
import typing
import unittest


TODO_JS_FILES = (
    "ES6/arrow-function/*",
    "ES6/for-of/let-of-of.js",
    "ES6/generator/*",
    "ES6/identifier/valid_await.js",
    "ES6/yield/*",
    "JSX/*",
    "es2017/async/methods/*",
    "es2017/async/regular-identifier/*",
    "fixtures/ES2016/identifier/gujarati_zha.js",
    "fixtures/ES6/identifier/dakuten_handakuten.js",
    "fixtures/ES6/identifier/estimated.js",
    "fixtures/ES6/identifier/ethiopic_digits.js",
    "fixtures/ES6/identifier/math_alef.js",
    "fixtures/ES6/identifier/math_dal_part.js",
    "fixtures/ES6/identifier/math_kaf_lam.js",
    "fixtures/ES6/identifier/math_zain_start.js",
    "fixtures/ES6/identifier/weierstrass.js",
    "fixtures/ES6/identifier/weierstrass_weierstrass.js",
    "fixtures/expression/primary/array/migrated_0007.js",
    "literal/string/migrated_0017.js",
    "multiline_string_literal.js",
)


def main() -> None:
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("quick_lint_js_exe")
    arg_parser.add_argument("esprima_tests")
    args = arg_parser.parse_args()

    quick_lint_js_executable = pathlib.Path(args.quick_lint_js_exe)
    esprima_test_fixture_directory = pathlib.Path(args.esprima_tests)

    test_files = sorted(esprima_test_fixture_directory.glob("**/*.js"))
    for test_file in test_files:
        test_file = test_file.resolve()
        if not should_check_js_file(test_file):
            continue
        lint_result = run_quick_lint_js(
            quick_lint_js_executable=quick_lint_js_executable, js_file=test_file
        )
        if lint_result.crashed:
            lint_result.dump()
            exit(1)


def should_check_js_file(js_file: pathlib.Path) -> bool:
    return not is_todo(js_file) and not test_failure_is_expected(js_file)


def is_todo(path: pathlib.Path) -> bool:
    return any(
        match_path(pattern=todo_pattern, path=path) for todo_pattern in TODO_JS_FILES
    )


def match_path(pattern: str, path) -> bool:
    Path = path.__class__
    pattern_parts = Path(pattern).parts
    subpath = Path(*path.parts[-len(pattern_parts) :])
    return subpath.match(pattern)


def test_failure_is_expected(path: pathlib.Path) -> bool:
    if path.with_suffix(".failure.json").exists():
        return True
    try:
        with open(path.with_suffix(".tree.json")) as tree_file:
            esprima_tree = json.load(tree_file)
        if esprima_tree.get("errors", ()):
            return True
    except FileNotFoundError:
        pass
    return False


def run_quick_lint_js(
    quick_lint_js_executable: pathlib.Path, js_file: pathlib.Path
) -> "LintResult":
    result = subprocess.run(
        [quick_lint_js_executable, "--", js_file],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )
    return LintResult(js_file=js_file, result=result)


class LintResult(typing.NamedTuple):
    js_file: pathlib.Path
    result: subprocess.CompletedProcess

    @property
    def crashed(self) -> bool:
        return self.result.returncode not in (0, 1)

    @property
    def user_runnable_command(self) -> bool:
        return " ".join(pipes.quote(str(arg)) for arg in self.result.args)

    def dump(self) -> None:
        sys.stderr.write(f"error: command crashed: {self.user_runnable_command}\n")
        sys.stderr.buffer.write(self.result.stdout)
        sys.stderr.write(f"\nContents of {self.js_file}:\n")
        sys.stderr.buffer.write(self.js_file.read_bytes())


class TestMatchPath(unittest.TestCase):
    def test_match_just_file_name(self) -> None:
        self.assertTrue(
            match_path(pattern="file.js", path=pathlib.PosixPath("/path/to/file.js"),)
        )
        self.assertFalse(
            match_path(
                pattern="notfile.js", path=pathlib.PosixPath("/path/to/file.js"),
            )
        )
        self.assertFalse(
            match_path(pattern="e.js", path=pathlib.PosixPath("/path/to/file.js"),)
        )

    def test_match_with_file_name_pattern_ignores_directory_names(self) -> None:
        self.assertFalse(
            match_path(pattern="path", path=pathlib.PosixPath("/path/to/file.js"),)
        )
        self.assertFalse(
            match_path(pattern="to", path=pathlib.PosixPath("/path/to/file.js"),)
        )
        self.assertFalse(
            match_path(pattern="/", path=pathlib.PosixPath("/path/to/file.js"),)
        )

    def test_match_file_name_and_parent(self) -> None:
        self.assertTrue(
            match_path(
                pattern="to/file.js", path=pathlib.PosixPath("/path/to/file.js"),
            )
        )

        self.assertFalse(
            match_path(
                pattern="other/file.js", path=pathlib.PosixPath("/path/to/file.js"),
            )
        )
        self.assertFalse(
            match_path(pattern="o/file.js", path=pathlib.PosixPath("/path/to/file.js"),)
        )

        self.assertFalse(
            match_path(pattern="to/file", path=pathlib.PosixPath("/path/to/file.js"),)
        )

    def test_match_file_glob_with_parent_directory(self) -> None:
        self.assertTrue(
            match_path(pattern="to/*", path=pathlib.PosixPath("/path/to/file.js"),)
        )

    def test_realistic(self) -> None:
        self.assertTrue(
            match_path(
                pattern="comment/migrated_0036.js",
                path=pathlib.PosixPath(
                    "/home/strager/tmp/Projects/esprima/test/fixtures/comment/migrated_0036.js"
                ),
            )
        )
        self.assertFalse(
            match_path(
                pattern="comment/migrated_0036.js",
                path=pathlib.PosixPath(
                    "/home/strager/tmp/Projects/esprima/test/fixtures/expression/primary/object/migrated_0036.js"
                ),
            )
        )
        self.assertTrue(
            match_path(
                pattern="expression/primary/object/migrated_0036.js",
                path=pathlib.PosixPath(
                    "/home/strager/tmp/Projects/esprima/test/fixtures/expression/primary/object/migrated_0036.js"
                ),
            )
        )


if __name__ == "__main__":
    main()
